# -*- coding: utf-8 -*-
"""NYCTaxiDataAnalysis2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13QDiDAGkqWOba1017eu7lTTPOMeEn25z
"""

! pip install pandas

import glob
import pandas as pd
import os

path_to_data = os.path.expanduser("~/Desktop/NYC")

file_list = glob.glob(os.path.join(path_to_data, "*.parquet"))

df_list = []
for file_path in file_list:
    df = pd.read_parquet(file_path)
    df_list.append(df)

nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# 4. Verify the combined DataFrame
print("Number of rows:", len(nyc_taxi_df))
print("DataFrame columns:", nyc_taxi_df.columns)
nyc_taxi_df.head()

# Convert pickup/dropoff to datetime
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df['tpep_dropoff_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_dropoff_datetime'])

# Filter out negative or zero distances/fares
nyc_taxi_df = nyc_taxi_df[
    (nyc_taxi_df['trip_distance'] > 0) &
    (nyc_taxi_df['fare_amount'] > 0)
]

# Create a trip duration column (minutes)
nyc_taxi_df['trip_duration_min'] = (
    nyc_taxi_df['tpep_dropoff_datetime'] - nyc_taxi_df['tpep_pickup_datetime']
).dt.total_seconds() / 60

nyc_taxi_df['pickup_hour'] = nyc_taxi_df['tpep_pickup_datetime'].dt.hour
nyc_taxi_df['pickup_day']  = nyc_taxi_df['tpep_pickup_datetime'].dt.day_name()

fare_columns = [
    'fare_amount', 'extra', 'mta_tax', 'improvement_surcharge',
    'tip_amount', 'tolls_amount', 'congestion_surcharge',
    'Airport_fee', 'total_amount'
]

nyc_taxi_df['Month'] = nyc_taxi_df['tpep_pickup_datetime'].dt.to_period('M').astype(str)
monthly_fares = nyc_taxi_df.groupby('Month')[fare_columns].sum()
monthly_fares = monthly_fares.sort_index()

pip install nbformat

pip install nbformat --upgrade

! pip install -U kaleido

import pandas as pd
import os
import glob
import plotly.graph_objects as go
import plotly.io as pio
from IPython.display import Image, display
import matplotlib.pyplot as plt

folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))

df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)


nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]
nyc_taxi_df['Month'] = nyc_taxi_df['tpep_pickup_datetime'].dt.to_period('M').dt.to_timestamp()

fare_columns = [
    'fare_amount', 'extra', 'mta_tax', 'improvement_surcharge',
    'tip_amount', 'tolls_amount', 'congestion_surcharge',
    'Airport_fee', 'total_amount'
]
existing_columns = [col for col in fare_columns if col in nyc_taxi_df.columns]
plot_columns = [col for col in existing_columns if col != 'total_amount']

monthly_fares = nyc_taxi_df.groupby('Month')[existing_columns].sum().sort_index()

fig = go.Figure()
for col in plot_columns:
    fig.add_trace(go.Scatter(
        x=monthly_fares.index,
        y=monthly_fares[col],
        mode='lines',
        stackgroup='one',
        name=col,
        hoverinfo='x+y',
    ))

fig.update_layout(
    title='📊 Monthly NYC Taxi Fare Breakdown (2024)',
    xaxis_title='Month',
    yaxis_title='Fare Component Amount ($)',
    legend_title='Fare Components',
    hovermode='x unified',
    template='plotly_white',
    width=1000,
    height=600
)


html_output = os.path.expanduser("~/Desktop/nyc_fare_breakdown_2024.html")
fig.write_html(html_output, auto_open=True)


png_output = os.path.expanduser("~/Desktop/nyc_fare_breakdown_2024.png")
pio.write_image(fig, png_output, width=1000, height=600)


csv_output = os.path.expanduser("~/Desktop/nyc_monthly_fare_data_2024.csv")
monthly_fares.to_csv(csv_output)

print("\n📅 Monthly NYC Taxi Fare Summary (2024):")
print(monthly_fares.round(2))

folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))

df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]
nyc_taxi_df['Month'] = nyc_taxi_df['tpep_pickup_datetime'].dt.to_period('M').dt.to_timestamp()

fare_columns = [
    'fare_amount', 'extra', 'mta_tax', 'improvement_surcharge',
    'tip_amount', 'tolls_amount', 'congestion_surcharge',
    'Airport_fee', 'total_amount'
]
existing_columns = [col for col in fare_columns if col in nyc_taxi_df.columns]
plot_columns = [col for col in existing_columns if col != 'total_amount']

monthly_fares = nyc_taxi_df.groupby('Month')[existing_columns].sum().sort_index()


fig = go.Figure()
for col in plot_columns:
    fig.add_trace(go.Scatter(
        x=monthly_fares.index,
        y=monthly_fares[col],
        mode='lines',
        stackgroup='one',
        name=col,
        hoverinfo='x+y',
    ))

fig.update_layout(
    title='📊 Monthly NYC Taxi Fare Breakdown (2024)',
    xaxis_title='Month',
    yaxis_title='Fare Component Amount ($)',
    legend_title='Fare Components',
    hovermode='x unified',
    template='plotly_white',
    width=1000,
    height=600
)


pio.kaleido.scope.default_format = "png"
pio.kaleido.scope.default_width = 1000
pio.kaleido.scope.default_height = 600
pio.kaleido.scope.default_scale = 1


html_output = os.path.expanduser("~/Desktop/nyc_fare_breakdown_2024.html")
fig.write_html(html_output, auto_open=True)


png_output = os.path.expanduser("~/Desktop/nyc_fare_breakdown_2024.png")
pio.write_image(fig, png_output)


csv_output = os.path.expanduser("~/Desktop/nyc_monthly_fare_data_2024.csv")
monthly_fares.to_csv(csv_output)


display(Image(filename=png_output))

monthly_fares_display = monthly_fares.round(2).style.set_caption("Monthly NYC Taxi Fare Breakdown (2024)") \
                                               .background_gradient(cmap='YlGnBu') \
                                               .format("${:.2f}")
monthly_fares_display

route_counts = (
    nyc_taxi_df.groupby(['PULocationID', 'DOLocationID'])
    .size()
    .reset_index(name='trip_count')
    .sort_values(by='trip_count', ascending=False)
)

# Keep top N routes
top_n = 100
top_routes = route_counts.head(top_n)


fig = go.Figure(data=[
    go.Scatter(
        x=top_routes['PULocationID'],
        y=top_routes['DOLocationID'],
        mode='markers',
        marker=dict(
            size=top_routes['trip_count'] / top_routes['trip_count'].max() * 60,  # scale bubble size
            sizemode='diameter',
            color=top_routes['trip_count'],
            colorscale='Viridis',
            showscale=True,
            colorbar=dict(title='Trip Count')
        ),
        text=[
            f"PU Zone: {pu}, DO Zone: {do}, Trips: {count}"
            for pu, do, count in zip(
                top_routes['PULocationID'],
                top_routes['DOLocationID'],
                top_routes['trip_count']
            )
        ],
        hoverinfo='text'
    )
])

fig.update_layout(
    title="🚕 Top 100 NYC Taxi Routes (Pickup → Dropoff Zones)",
    xaxis_title="Pickup Location ID (PULocationID)",
    yaxis_title="Dropoff Location ID (DOLocationID)",
    template="plotly_white",
    width=1000,
    height=700
)


html_output = os.path.expanduser("~/Desktop/nyc_top_routes_bubble.html")
png_output = os.path.expanduser("~/Desktop/nyc_top_routes_bubble.png")
csv_output = os.path.expanduser("~/Desktop/nyc_top_routes_data.csv")


fig.write_html(html_output, auto_open=True)

import plotly.io as pio
pio.write_image(fig, png_output)


top_routes.to_csv(csv_output, index=False)


display(Image(filename=png_output))


top_routes.style.set_caption("🚕 Top 100 Pickup→Dropoff Routes (2024)") \
                 .background_gradient(cmap="YlOrBr") \
                 .format({"trip_count": "{:,}"})

lookup_path = os.path.expanduser("~/Desktop/NYC/taxi_zone_lookup.csv")
zone_lookup = pd.read_csv(lookup_path)

# Create mapping dictionaries
id_to_zone = dict(zip(zone_lookup['LocationID'], zone_lookup['Zone']))


nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]


route_counts = (
    nyc_taxi_df.groupby(['PULocationID', 'DOLocationID'])
    .size()
    .reset_index(name='trip_count')
    .sort_values(by='trip_count', ascending=False)
)

# Keep top N routes
top_n = 100
top_routes = route_counts.head(top_n).copy()

# Map zone names
top_routes['PU_Zone'] = top_routes['PULocationID'].map(id_to_zone)
top_routes['DO_Zone'] = top_routes['DOLocationID'].map(id_to_zone)

fig = go.Figure(data=[
    go.Scatter(
        x=top_routes['PU_Zone'],
        y=top_routes['DO_Zone'],
        mode='markers',
        marker=dict(
            size=top_routes['trip_count'] / top_routes['trip_count'].max() * 60,
            sizemode='diameter',
            color=top_routes['trip_count'],
            colorscale='Viridis',
            showscale=True,
            colorbar=dict(title='Trip Count')
        ),
        text=[
            f"PU: {pu}<br>DO: {do}<br>Trips: {count:,}"
            for pu, do, count in zip(
                top_routes['PU_Zone'],
                top_routes['DO_Zone'],
                top_routes['trip_count']
            )
        ],
        hoverinfo='text'
    )
])

fig.update_layout(
    title="🚖 Top 100 NYC Taxi Routes (Zone → Zone, 2024)",
    xaxis_title="Pickup Zone",
    yaxis_title="Dropoff Zone",
    template="plotly_white",
    width=1100,
    height=800
)


html_output = os.path.expanduser("~/Desktop/nyc_top_routes_zones_bubble.html")
png_output = os.path.expanduser("~/Desktop/nyc_top_routes_zones_bubble.png")
csv_output = os.path.expanduser("~/Desktop/nyc_top_routes_zones.csv")


fig.write_html(html_output, auto_open=True)
pio.write_image(fig, png_output)
top_routes.to_csv(csv_output, index=False)

display(Image(filename=png_output))


top_routes[['PU_Zone', 'DO_Zone', 'trip_count']].style.set_caption("🚖 Top 100 PU→DO Zone Pairs (2024)") \
                                                     .background_gradient(cmap="Oranges") \
                                                     .format({"trip_count": "{:,}"})

nyc_taxi_df['trip_duration_hrs'] = (nyc_taxi_df['tpep_dropoff_datetime'] - nyc_taxi_df['tpep_pickup_datetime']).dt.total_seconds() / 3600.0
nyc_taxi_df['speed_mph'] = nyc_taxi_df['trip_distance'] / nyc_taxi_df['trip_duration_hrs']

valid_df = nyc_taxi_df[
    (nyc_taxi_df['trip_distance'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] <= 2)
].copy()


valid_df['hour'] = valid_df['tpep_pickup_datetime'].dt.hour
hourly_stats = valid_df.groupby('hour').agg(
    avg_speed_mph=('speed_mph', 'mean'),
    trip_count=('speed_mph', 'size')
).reset_index()


fig = go.Figure()

# Average Speed Line
fig.add_trace(go.Scatter(
    x=hourly_stats['hour'],
    y=hourly_stats['avg_speed_mph'],
    mode='lines+markers',
    line=dict(shape='spline', width=3, color='blue'),
    marker=dict(size=8),
    name='Avg Speed (mph)',
    hovertemplate='Hour: %{x}<br>Avg Speed: %{y:.2f} mph<br>Trips: %{customdata}',
    customdata=hourly_stats['trip_count']
))

# Trip Count Bar (Secondary Y-axis)
fig.add_trace(go.Bar(
    x=hourly_stats['hour'],
    y=hourly_stats['trip_count'],
    yaxis='y2',
    name='Trip Count',
    opacity=0.6,
    marker=dict(color='orange'),
    hovertemplate='Hour: %{x}<br>Trips: %{y}'
))

fig.update_layout(
    title='🚖 Average Taxi Speed and Trip Count by Hour of Day (2024)',
    xaxis=dict(title='Hour of Day', tickmode='linear', dtick=1),
    yaxis=dict(title='Average Speed (mph)', side='left'),
    yaxis2=dict(title='Trip Count', overlaying='y', side='right'),
    legend=dict(x=0.01, y=0.99),
    template='plotly_white',
    width=1000,
    height=600
)


html_output = os.path.expanduser("~/Desktop/nyc_avg_speed_trip_count_by_hour.html")
png_output = os.path.expanduser("~/Desktop/nyc_avg_speed_trip_count_by_hour.png")
csv_output = os.path.expanduser("~/Desktop/nyc_avg_speed_trip_count_by_hour.csv")

fig.write_html(html_output, auto_open=True)
pio.write_image(fig, png_output)
hourly_stats.to_csv(csv_output, index=False)


display(Image(filename=png_output))

# Display data table
hourly_stats.style.set_caption("🕒 Avg Taxi Speed and Trip Count by Hour (2024)") \
                  .background_gradient(subset=['avg_speed_mph'], cmap="Blues") \
                  .background_gradient(subset=['trip_count'], cmap="Oranges") \
                  .format({"avg_speed_mph": "{:.2f}", "trip_count": "{:,}"})

folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)


nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df['tpep_dropoff_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_dropoff_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

nyc_taxi_df['trip_duration_hrs'] = (
    (nyc_taxi_df['tpep_dropoff_datetime'] - nyc_taxi_df['tpep_pickup_datetime']).dt.total_seconds() / 3600
)
nyc_taxi_df['speed_mph'] = nyc_taxi_df['trip_distance'] / nyc_taxi_df['trip_duration_hrs']

valid_df = nyc_taxi_df[
    (nyc_taxi_df['trip_distance'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] <= 2)
].copy()

valid_df['day_of_week'] = valid_df['tpep_pickup_datetime'].dt.day_name()
day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

speed_by_day = valid_df.groupby('day_of_week').agg(
    avg_speed_mph=('speed_mph', 'mean'),
    trip_count=('speed_mph', 'size')
).reindex(day_order).reset_index()

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=speed_by_day['day_of_week'],
    y=speed_by_day['avg_speed_mph'],
    mode='lines+markers',
    name='Avg Speed (mph)',
    line=dict(width=3, color='blue'),
    hovertemplate='Day: %{x}<br>Avg Speed: %{y:.2f} mph<br>Trips: %{customdata:,}',
    customdata=speed_by_day['trip_count']
))

fig.add_trace(go.Bar(
    x=speed_by_day['day_of_week'],
    y=speed_by_day['trip_count'],
    name='Trip Count',
    yaxis='y2',
    opacity=0.5,
    marker_color='orange',
    hovertemplate='Day: %{x}<br>Trips: %{y:,}'
))

fig.update_layout(
    title='📆 Average Taxi Speed & Trip Count by Day of Week (2024)',
    xaxis_title='Day of Week',
    yaxis=dict(title='Average Speed (mph)'),
    yaxis2=dict(title='Trip Count', overlaying='y', side='right'),
    legend=dict(x=0.01, y=0.99),
    template='plotly_white',
    width=1000,
    height=600
)


html_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_day.html")
png_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_day.png")
csv_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_day.csv")


fig.write_html(html_output, auto_open=True)
pio.write_image(fig, png_output)
speed_by_day.to_csv(csv_output, index=False)


display(Image(filename=png_output))
speed_by_day.style.set_caption("🗓️ Avg Speed & Trip Count by Day of Week (2024)") \
                 .background_gradient(subset=['avg_speed_mph'], cmap="Blues") \
                 .background_gradient(subset=['trip_count'], cmap="Oranges") \
                 .format({"avg_speed_mph": "{:.2f}", "trip_count": "{:,}"})

nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df['tpep_dropoff_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_dropoff_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

nyc_taxi_df['trip_duration_hrs'] = (
    (nyc_taxi_df['tpep_dropoff_datetime'] - nyc_taxi_df['tpep_pickup_datetime']).dt.total_seconds() / 3600
)
nyc_taxi_df['speed_mph'] = nyc_taxi_df['trip_distance'] / nyc_taxi_df['trip_duration_hrs']

valid_df = nyc_taxi_df[
    (nyc_taxi_df['trip_distance'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] <= 2)
].copy()


valid_df['month'] = valid_df['tpep_pickup_datetime'].dt.to_period('M').dt.to_timestamp()
speed_by_month = valid_df.groupby('month').agg(
    avg_speed_mph=('speed_mph', 'mean'),
    trip_count=('speed_mph', 'size')
).reset_index()


fig = go.Figure()

fig.add_trace(go.Scatter(
    x=speed_by_month['month'],
    y=speed_by_month['avg_speed_mph'],
    mode='lines+markers',
    name='Avg Speed (mph)',
    line=dict(width=3, color='green'),
    hovertemplate='Month: %{x|%B %Y}<br>Avg Speed: %{y:.2f} mph<br>Trips: %{customdata:,}',
    customdata=speed_by_month['trip_count']
))

fig.add_trace(go.Bar(
    x=speed_by_month['month'],
    y=speed_by_month['trip_count'],
    name='Trip Count',
    yaxis='y2',
    opacity=0.5,
    marker_color='red',
    hovertemplate='Month: %{x|%B %Y}<br>Trips: %{y:,}'
))

fig.update_layout(
    title='📆 Average Taxi Speed & Trip Count by Month (2024)',
    xaxis_title='Month',
    yaxis=dict(title='Average Speed (mph)'),
    yaxis2=dict(title='Trip Count', overlaying='y', side='right'),
    template='plotly_white',
    width=1000,
    height=600
)


html_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_month.html")
png_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_month.png")
csv_output = os.path.expanduser("~/Desktop/nyc_avg_speed_by_month.csv")

fig.write_html(html_output, auto_open=True)
pio.write_image(fig, png_output)
speed_by_month.to_csv(csv_output, index=False)

display(Image(filename=png_output))
speed_by_month.style.set_caption("🗓️ Avg Speed & Trip Count by Month (2024)") \
                    .background_gradient(subset=['avg_speed_mph'], cmap="Greens") \
                    .background_gradient(subset=['trip_count'], cmap="Oranges") \
                    .format({"avg_speed_mph": "{:.2f}", "trip_count": "{:,}"})

folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)


nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df['tpep_dropoff_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_dropoff_datetime'])

nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

nyc_taxi_df['trip_duration_hrs'] = (
    (nyc_taxi_df['tpep_dropoff_datetime'] - nyc_taxi_df['tpep_pickup_datetime']).dt.total_seconds() / 3600
)
nyc_taxi_df['speed_mph'] = nyc_taxi_df['trip_distance'] / nyc_taxi_df['trip_duration_hrs']
nyc_taxi_df['tip_pct'] = (nyc_taxi_df['tip_amount'] / nyc_taxi_df['fare_amount']) * 100

valid_df = nyc_taxi_df[
    (nyc_taxi_df['trip_distance'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] > 0) &
    (nyc_taxi_df['trip_duration_hrs'] <= 2) &
    (nyc_taxi_df['fare_amount'] > 0) &
    (nyc_taxi_df['tip_pct'] < 200) &
    (nyc_taxi_df['speed_mph'] < 100)
].dropna(subset=['speed_mph', 'tip_pct']).copy()

valid_df['speed_bin'] = pd.cut(valid_df['speed_mph'], bins=[0, 5, 10, 15, 20, 25, 30, 40, 100])

# Take up to 1000 samples per speed bin
sample_df = (
    valid_df.groupby('speed_bin', group_keys=False, observed=True)
    .apply(lambda x: x.sample(n=min(1000, len(x)), random_state=42))
)


scatter_fig = go.Figure(data=go.Scatter(
    x=sample_df['speed_mph'],
    y=sample_df['tip_pct'],
    mode='markers',
    marker=dict(size=4, opacity=0.3, color='blue'),
    hoverinfo='skip'
))

scatter_fig.update_layout(
    title="🚕 Scatter: Speed vs Tip Percentage (Stratified Sample, 2024)",
    xaxis_title="Speed (mph)",
    yaxis_title="Tip % of Fare",
    template="plotly_white",
    width=1000,
    height=600
)


box_fig = go.Figure()

for bin_label, bin_df in valid_df.groupby('speed_bin', observed=True):
    box_fig.add_trace(go.Box(
        y=bin_df['tip_pct'],
        name=str(bin_label),
        boxpoints='outliers',
        marker=dict(opacity=0.4),
        hoverinfo='y+name'
    ))

box_fig.update_layout(
    title="📦 Box Plot: Tip % by Speed Bin (2024)",
    xaxis_title="Speed Bins (mph)",
    yaxis_title="Tip % of Fare",
    template="plotly_white",
    width=1000,
    height=600
)

scatter_html = os.path.expanduser("~/Desktop/speed_vs_tip_scatter.html")
scatter_png = os.path.expanduser("~/Desktop/speed_vs_tip_scatter.png")
box_html = os.path.expanduser("~/Desktop/speed_vs_tip_box.html")
box_png = os.path.expanduser("~/Desktop/speed_vs_tip_box.png")
csv_output = os.path.expanduser("~/Desktop/speed_vs_tip_data.csv")

scatter_fig.write_html(scatter_html, auto_open=True)
box_fig.write_html(box_html)


try:
    pio.write_image(scatter_fig, scatter_png)
except Exception as e:
    print("⚠️ Scatter image export failed:", e)

try:
    pio.write_image(box_fig, box_png)
except Exception as e:
    print("⚠️ Box image export failed:", e)


valid_df[['speed_mph', 'tip_pct']].to_csv(csv_output, index=False)


print("🔵 Scatter Plot:")
display(Image(filename=scatter_png))

print("📦 Box Plot:")
display(Image(filename=box_png))

import plotly.express as px

fig = px.histogram(valid_df, x='tip_pct', nbins=50,
                   title="💸 Distribution of Tip Percentage",
                   labels={'tip_pct': 'Tip % of Fare'},
                   template="plotly_white")
fig.update_layout(xaxis_range=[0, 100])
fig.show()

import pandas as pd
import os
import glob
import plotly.graph_objects as go

# -----------------------------
# Load and combine data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))

df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024 data and prepare
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]
nyc_taxi_df['Month'] = nyc_taxi_df['tpep_pickup_datetime'].dt.to_period('M').dt.to_timestamp()

fare_columns = [
    'fare_amount', 'extra', 'mta_tax', 'improvement_surcharge',
    'tip_amount', 'tolls_amount', 'congestion_surcharge',
    'Airport_fee', 'total_amount'
]
existing_columns = [col for col in fare_columns if col in nyc_taxi_df.columns]
plot_columns = [col for col in existing_columns if col != 'total_amount']

monthly_fares = nyc_taxi_df.groupby('Month')[existing_columns].sum().sort_index()

# -----------------------------
# Plotly Stacked Area Chart
# -----------------------------
fig = go.Figure()
fig.update_layout(
    legend=dict(
        title='Fare Components',
        itemclick="toggle",        # enables single-click hide/show
        itemdoubleclick="toggleothers",  # enables double-click to isolate
    ),
    hovermode='x unified',
    template='plotly_white',
    title='📊 Monthly NYC Taxi Fare Breakdown (2024)',
    xaxis_title='Month',
    yaxis_title='Fare Component Amount ($)',
    width=1000,
    height=600
)

# Add traces for each component (stacked)
for col in plot_columns:
    fig.add_trace(go.Scatter(
        x=monthly_fares.index,
        y=monthly_fares[col],
        mode='lines',
        stackgroup='one',  # enables stacking
        name=col,
        hoverinfo='x+y',
    ))

# Customize layout
fig.update_layout(
    title='📊 Monthly NYC Taxi Fare Breakdown (2024)',
    xaxis_title='Month',
    yaxis_title='Fare Component Amount ($)',
    legend_title='Fare Components',
    hovermode='x unified',
    template='plotly_white',
    width=1000,
    height=600
)

# Show interactive chart

output_path = os.path.expanduser("~/Desktop/nyc_fare_breakdown_2024.html")
fig.write_html(output_path, auto_open=True)

! pip install scipy

import networkx as nx
import random

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}

nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)

# Drop missing or unmapped labels
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Sample for Visualization
# -----------------------------
# Limit to 600 samples for performance
sample_df = payment_df.sample(n=600, random_state=42)

# Create nodes
nodes = [{'payment_type': pt} for pt in sample_df['payment_label']]

# -----------------------------
# Build the Graph
# -----------------------------
G = nx.Graph()

# Add nodes
for i, node in enumerate(nodes):
    G.add_node(i, payment_type=node['payment_type'])

# Add edges between same-type nodes (simulate clustering)
for i in range(len(nodes)):
    for j in range(i + 1, len(nodes)):
        if nodes[i]['payment_type'] == nodes[j]['payment_type'] and random.random() < 0.15:
            G.add_edge(i, j)

# -----------------------------
# Force-directed Layout
# -----------------------------
pos = nx.spring_layout(G, k=0.8, iterations=50, seed=42)

# -----------------------------
# Plotly Visualization
# -----------------------------
edge_x = []
edge_y = []

for edge in G.edges():
    x0, y0 = pos[edge[0]]
    x1, y1 = pos[edge[1]]
    edge_x += [x0, x1, None]
    edge_y += [y0, y1, None]

edge_trace = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color='#ccc'),
    hoverinfo='none',
    mode='lines'
)

# Node trace
node_x = []
node_y = []
node_color = []
node_text = []

color_map = {
    'Credit Card': '#1f77b4',
    'Cash': '#ff7f0e',
    'No Charge': '#2ca02c',
    'Dispute': '#d62728',
    'Unknown': '#9467bd',
    'Voided Trip': '#8c564b'
}

for node in G.nodes(data=True):
    x, y = pos[node[0]]
    pt = node[1]['payment_type']
    node_x.append(x)
    node_y.append(y)
    node_color.append(color_map.get(pt, '#cccccc'))
    node_text.append(pt)

node_trace = go.Scatter(
    x=node_x, y=node_y,
    mode='markers',
    hoverinfo='text',
    text=node_text,
    marker=dict(
        color=node_color,
        size=8,
        line_width=0.5
    )
)

fig_force = go.Figure(data=[edge_trace, node_trace],
                layout=go.Layout(
                    title=dict(
                        text='💳 Clustered Force Layout: NYC Taxi Payment Types (2024)',
                        font=dict(size=20)
                    ),
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20,l=5,r=5,t=40),
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    width=1000,
                    height=700
                ))


# -----------------------------
# Save and Open Visualization
# -----------------------------
output_path_force = os.path.expanduser("~/Desktop/nyc_payment_type_force_layout.html")
fig_force.write_html(output_path_force, auto_open=True)

import pandas as pd
import os
import glob
import numpy as np
import plotly.express as px

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))

df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter for 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}

nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)

# Drop missing labels
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# Count occurrences
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Generate Bubble Layout Positions
# -----------------------------
angles = np.linspace(0, 2 * np.pi, len(payment_counts), endpoint=False)
radius = 2  # spacing between bubbles
x = radius * np.cos(angles)
y = radius * np.sin(angles)

# -----------------------------
# Create Bubble Chart
# -----------------------------
fig = px.scatter(
    payment_counts,
    x=x,
    y=y,
    size='count',
    color='payment_type',
    hover_name='payment_type',
    size_max=100,
    title='💳 Payment Type Distribution (Bubble Layout)',
)

fig.update_traces(
    mode='markers',
    marker=dict(
        sizemode='area',
        line=dict(width=2, color='white')
    )
)

fig.update_layout(
    showlegend=False,
    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    height=600,
    width=600
)

# -----------------------------
# Save & Open
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles.html")
fig.write_html(output_path, auto_open=True)

import pandas as pd
import os
import glob
import numpy as np
import plotly.express as px

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))

df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}

nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Count payment type occurrences
# -----------------------------
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Position circles in a radial layout
# -----------------------------
angles = np.linspace(0, 2 * np.pi, len(payment_counts), endpoint=False)
radius = 0.7 # tighter spacing
x = radius * np.cos(angles)
y = radius * np.sin(angles)

payment_counts['x'] = x
payment_counts['y'] = y

# -----------------------------
# Plotly Bubble Chart (Pretty)
# -----------------------------
fig = px.scatter(
    payment_counts,
    x='x',
    y='y',
    size='count',
    color='payment_type',
    text='payment_type',
    size_max=120,
    title='💳 NYC Taxi Payment Type Distribution (2024)',
    color_discrete_sequence=px.colors.qualitative.Set3  # beautiful palette
)

fig.update_traces(
    mode='markers+text',
    marker=dict(sizemode='area', line=dict(width=2, color='white')),
    textposition='middle center',
    textfont=dict(color='white', size=12, family='Arial')
)

fig.update_layout(
    showlegend=False,
    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    plot_bgcolor='white',
    paper_bgcolor='white',
    height=700,
    width=700
)

# -----------------------------
# Save to HTML
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles_pretty.html")
fig.write_html(output_path, auto_open=True)

import pandas as pd
import os
import glob
import numpy as np
import plotly.express as px

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}
nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Count payment type occurrences
# -----------------------------
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Position circles in a more compact radial layout
# -----------------------------
# Custom color palette inspired by the example image
color_palette = {
    'Credit Card': '#1F77B4',  # Deep blue
    'Cash': '#D62728',         # Bright red
    'No Charge': '#2CA02C',    # Green
    'Dispute': '#FF7F0E',      # Orange
    'Unknown': '#9467BD',      # Purple
    'Voided Trip': '#8C564B'   # Brown
}
payment_counts['color'] = payment_counts['payment_type'].map(color_palette)

# Calculate total count for percentage and scaling
total_count = payment_counts['count'].sum()
payment_counts['percentage'] = payment_counts['count'] / total_count * 100

# Create a more compact circular layout
n = len(payment_counts)
angles = np.linspace(0, 2 * np.pi, n, endpoint=False)
radius = 0.5  # Reduced radius for more compact layout

x = radius * np.cos(angles)
y = radius * np.sin(angles)
payment_counts['x'] = x
payment_counts['y'] = y

# -----------------------------
# Plotly Bubble Chart (Improved)
# -----------------------------
fig = px.scatter(
    payment_counts,
    x='x',
    y='y',
    size='count',
    color='payment_type',
    text='payment_type',
    size_max=200,  # Increased max size of bubbles
    title='NYC Taxi Payment Type Distribution (2024)',
    color_discrete_map=color_palette
)

# Customize trace appearance
fig.update_traces(
    mode='markers+text',
    marker=dict(
        sizemode='area',
        line=dict(width=2, color='white'),
        opacity=0.8  # Slight transparency
    ),
    textposition='middle center',
    textfont=dict(
        color='white',
        size=12,
        family='Arial Black',
        weight='bold'
    )
)

# Add percentage annotations
for i, row in payment_counts.iterrows():
    fig.add_annotation(
        x=row['x'],
        y=row['y'],
        text=f"{row['percentage']:.1f}%",
        showarrow=False,
        font=dict(color='black', size=10),
        yshift=30  # Position percentage above bubble
    )

# Layout customization
fig.update_layout(
    showlegend=False,
    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    plot_bgcolor='white',
    paper_bgcolor='white',
    height=700,
    width=700,
    title_font_size=20,
    title_x=0.5  # Center the title
)

# -----------------------------
# Save to HTML
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles_improved.html")
fig.write_html(output_path, auto_open=True)

print("Visualization saved successfully!")

import pandas as pd
import os
import glob
import numpy as np
import plotly.express as px

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}
nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Count payment type occurrences
# -----------------------------
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Position circles in a more compact radial layout
# -----------------------------
# Custom color palette
color_palette = {
    'Credit Card': '#1F77B4',  # Deep blue
    'Cash': '#D62728',         # Bright red
    'No Charge': '#2CA02C',    # Green
    'Dispute': '#FF7F0E',      # Orange
    'Unknown': '#9467BD',      # Purple
    'Voided Trip': '#8C564B'   # Brown
}
payment_counts['color'] = payment_counts['payment_type'].map(color_palette)

# Calculate total count for percentage and scaling
total_count = payment_counts['count'].sum()
payment_counts['percentage'] = payment_counts['count'] / total_count * 100

# Create a more compact circular layout
n = len(payment_counts)
angles = np.linspace(0, 2 * np.pi, n, endpoint=False)
radius = 0.5  # Reduced radius for more compact layout

x = radius * np.cos(angles)
y = radius * np.sin(angles)
payment_counts['x'] = x
payment_counts['y'] = y

# -----------------------------
# Plotly Bubble Chart (Improved)
# -----------------------------
fig = px.scatter(
    payment_counts,
    x='x',
    y='y',
    size='count',
    color='payment_type',
    text='payment_type',
    size_max=300,  # Increased max size of bubbles
    title='NYC Taxi Payment Type Distribution (2024)',
    color_discrete_map=color_palette
)

# Customize trace appearance
fig.update_traces(
    mode='markers+text',
    marker=dict(
        sizemode='area',
        line=dict(width=2, color='white'),
        opacity=0.8  # Slight transparency
    ),
    textposition='middle center',
    textfont=dict(
        color='white',
        size=14,  # Slightly larger font
        family='Arial Black',
        weight='bold'
    )
)

# Add percentage annotations
for i, row in payment_counts.iterrows():
    fig.add_annotation(
        x=row['x'],
        y=row['y'],
        text=f"{row['percentage']:.1f}%",
        showarrow=False,
        font=dict(color='black', size=12),
        yshift=40  # Position percentage above bubble
    )

# Layout customization
fig.update_layout(
    showlegend=False,
    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
    plot_bgcolor='white',
    paper_bgcolor='white',
    height=800,  # Increased height
    width=800,   # Increased width
    title_font_size=20,
    title_x=0.5  # Center the title
)

# -----------------------------
# Save to HTML
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles_improved.html")
fig.write_html(output_path, auto_open=True)

print("Visualization saved successfully!")

import pandas as pd
import os
import glob
import numpy as np
import plotly.graph_objs as go

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}
nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Count payment type occurrences
# -----------------------------
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Calculate percentages and filter out 0%
# -----------------------------
total_count = payment_counts['count'].sum()
payment_counts['percentage'] = payment_counts['count'] / total_count * 100
payment_counts = payment_counts[payment_counts['percentage'] > 0]

# -----------------------------
# Color Palette
# -----------------------------
color_palette = {
    'Credit Card': '#2C7BB6',   # Deeper blue
    'Cash': '#D7191C',          # Deep red
    'No Charge': '#2CA02C',     # Green
    'Dispute': '#FF7F0E',       # Orange
    'Unknown': '#9467BD',       # Purple
    'Voided Trip': '#8C564B'    # Brown
}

# -----------------------------
# Distribute bubbles in a circle
# -----------------------------
def distribute_bubbles(num_bubbles):
    angles = np.linspace(0, 2*np.pi, num_bubbles, endpoint=False)
    radius = 1  # Adjust this to control overall spread
    x = radius * np.cos(angles)
    y = radius * np.sin(angles)
    return x, y

# -----------------------------
# Create Bubble Plot
# -----------------------------
# Create traces for each payment type
num_types = len(payment_counts)
x_pos, y_pos = distribute_bubbles(num_types)

traces = []
for i, (_, row) in enumerate(payment_counts.iterrows()):
    trace = go.Scatter(
        x=[x_pos[i]],
        y=[y_pos[i]],
        mode='markers+text',
        marker=dict(
            size=row['percentage'] * 20,  # Scale size by percentage
            color=color_palette[row['payment_type']],
            line=dict(color='white', width=2),
            opacity=0.8
        ),
        text=[f"{row['payment_type']}<br>{row['percentage']:.1f}%"],
        textposition='middle center',
        textfont=dict(
            color='white',
            size=14,
            family='Arial Black'
        )
    )
    traces.append(trace)

# -----------------------------
# Layout
# -----------------------------
layout = go.Layout(
    title={
        'text': 'NYC Taxi Payment Type Distribution (2024)',
        'y':0.95,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': dict(size=20)
    },
    showlegend=False,
    xaxis=dict(
        showgrid=False,
        zeroline=False,
        showticklabels=False,
        range=[-1.5, 1.5]
    ),
    yaxis=dict(
        showgrid=False,
        zeroline=False,
        showticklabels=False,
        range=[-1.5, 1.5]
    ),
    plot_bgcolor='white',
    paper_bgcolor='white',
    height=800,
    width=800
)

# Create figure
fig = go.Figure(data=traces, layout=layout)

# -----------------------------
# Save to HTML
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles_improved.html")
fig.write_html(output_path, auto_open=True)

print("Visualization saved successfully!")
print(payment_counts)

import pandas as pd
import os
import glob
import plotly.graph_objs as go

# -----------------------------
# Load Data
# -----------------------------
folder_path = os.path.expanduser("~/Desktop/NYC")
file_list = glob.glob(os.path.join(folder_path, "*.parquet"))
df_list = [pd.read_parquet(file) for file in file_list]
nyc_taxi_df = pd.concat(df_list, ignore_index=True)

# -----------------------------
# Filter 2024
# -----------------------------
nyc_taxi_df['tpep_pickup_datetime'] = pd.to_datetime(nyc_taxi_df['tpep_pickup_datetime'])
nyc_taxi_df = nyc_taxi_df[nyc_taxi_df['tpep_pickup_datetime'].dt.year == 2024]

# -----------------------------
# Map payment_type codes to labels
# -----------------------------
payment_map = {
    1: 'Credit Card',
    2: 'Cash',
    3: 'No Charge',
    4: 'Dispute',
    5: 'Unknown',
    6: 'Voided Trip'
}
nyc_taxi_df['payment_label'] = nyc_taxi_df['payment_type'].map(payment_map)
payment_df = nyc_taxi_df.dropna(subset=['payment_label'])

# -----------------------------
# Count payment type occurrences
# -----------------------------
payment_counts = payment_df['payment_label'].value_counts().reset_index()
payment_counts.columns = ['payment_type', 'count']

# -----------------------------
# Calculate percentages and filter out very small percentages
# -----------------------------
total_count = payment_counts['count'].sum()
payment_counts['percentage'] = payment_counts['count'] / total_count * 100
payment_counts = payment_counts[payment_counts['percentage'] > 0].sort_values('percentage', ascending=False)

# -----------------------------
# Color Palette
# -----------------------------
color_palette = {
    'Credit Card': '#2C7BB6',   # Deeper blue
    'Cash': '#D7191C',          # Deep red
    'No Charge': '#2CA02C',     # Green
    'Dispute': '#FF7F0E',       # Orange
    'Unknown': '#9467BD',       # Purple
    'Voided Trip': '#8C564B'    # Brown
}

# -----------------------------
# Create Bubble Plot
# -----------------------------
# Prepare data for positioning
data = []
for _, row in payment_counts.iterrows():
    data.append({
        'x': 0,
        'y': 0,
        'color': color_palette[row['payment_type']],
        'size': row['percentage'],
        'label': row['payment_type'],
        'percentage': row['percentage']
    })

# Create traces
traces = []
for item in data:
    traces.append(go.Scatter(
        x=[item['x']],
        y=[item['y']],
        mode='markers+text',
        marker=dict(
            size=item['size'] * 5,  # Adjust multiplier for desired size
            color=item['color'],
            line=dict(color='white', width=2),
            opacity=0.8
        ),
        text=[f"{item['label']}<br>{item['percentage']:.1f}%"],
        textposition='middle center',
        textfont=dict(
            color='white',
            size=14,
            family='Arial Black'
        )
    ))

# -----------------------------
# Layout
# -----------------------------
layout = go.Layout(
    title={
        'text': 'NYC Taxi Payment Type Distribution (2024)',
        'y':0.95,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': dict(size=20)
    },
    showlegend=False,
    xaxis=dict(
        showgrid=False,
        zeroline=False,
        showticklabels=False,
        range=[-2, 2]
    ),
    yaxis=dict(
        showgrid=False,
        zeroline=False,
        showticklabels=False,
        range=[-2, 2]
    ),
    plot_bgcolor='white',
    paper_bgcolor='white',
    height=800,
    width=800
)

# Create figure
fig = go.Figure(data=traces, layout=layout)

# -----------------------------
# Save to HTML
# -----------------------------
output_path = os.path.expanduser("~/Desktop/payment_type_bubbles_improved.html")
fig.write_html(output_path, auto_open=True)

print("Visualization saved successfully!")
print(payment_counts)